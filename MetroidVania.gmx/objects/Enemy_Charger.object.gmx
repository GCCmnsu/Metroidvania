<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Charger</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;

enemy_health =  80;

enemy_attacking_player = false;
enemy_gravity = 4;

enemy_vertical_speed = 0;
enemy_gravity = .4
enemy_isfalling = false
enemy_jump_speed = -8;


//how fast the enemy moves side to side
enemy_hspeed = 12
enemy_jump_chance = 0 //chance of enemy jump each frame when on the ground

//ai sight params
enemy_sight_radius = 30 //how long the sightline can be to the player
enemy_sight_width = 700; //width of tracking box when enemy is agroed
enemy_sight_height = 100; //height of tracking box when enemy is agroed

//charge vars
enemy_charge_time = 45  //how long it will charge in a line before stopping
enemy_charge_time_min = .75 //Goes between x% and 100% of charge_time. Set to 1 for no variance in charging

enemy_is_charging = false;  //if enemy is currently charging
enemy_wait_time = 50;   //time where enemy will sit after completing charge
enemy_is_waiting = false;   //if enemy is waiting after a charge
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///enemy finishes waiting
enemy_is_waiting = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///enemy stops charging after some time naturally
enemy_is_charging = false
enemy_is_waiting = true
alarm[1] = enemy_wait_time
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement logic

//detect enemy player
if !enemy_attacking_player
    {
    if !collision_line(x,y-16,global.player_lastx,global.player_lasty,Wall, true, true)
        {
        enemy_attacking_player = true;
        }
    }

//Ready to charge
if enemy_attacking_player and not enemy_is_charging and not enemy_is_waiting
    {
    //chase to left of player
    if(collision_rectangle(x-enemy_sight_width,y+enemy_sight_height,x-10,y-enemy_sight_height,Player,true,false))
        {
        var rand_charge_time = irandom_range(enemy_charge_time * enemy_charge_time_min, enemy_charge_time);
        direction = 180
        enemy_is_charging = true
        image_index = 1
        alarm[0] = rand_charge_time
        alarm[1] = -1
        }
    
    //chase to right of player
    if(collision_rectangle(x+enemy_sight_width,y+enemy_sight_height,x-10,y-enemy_sight_height,Player,true,false))
        {
        var rand_charge_time = irandom_range(enemy_charge_time * enemy_charge_time_min, enemy_charge_time);
        direction = 0
        enemy_is_charging = true
        image_index = 0
        alarm[0] = rand_charge_time
        alarm[1] = -1
        }
    }
    
if enemy_is_charging and !enemy_is_waiting
    {
    if direction == 0
        {
        //move right
        if !place_meeting(x + enemy_hspeed, y, Wall)
            {
            //no wall in way, charge
            x += enemy_hspeed
            }
        else
            {
            //wall in way, stop charging
            alarm[0] = -1;
            alarm[1] = enemy_wait_time
            enemy_is_charging = false
            enemy_is_waiting = true
            }
        }
    else
        {
        //move left
        if !place_meeting(x - enemy_hspeed, y, Wall)
            {
            //no wall in way, charge
            x -= enemy_hspeed
            }
        else
            {
            //wall in way, stop charging
            alarm[0] = -1;
            alarm[1] = enemy_wait_time
            enemy_is_charging = false
            enemy_is_waiting = true
            }
        }
    }    
    

//spring code
if(collision_rectangle(x-8,y+3,x+8,y+3,Spring,true,false))
{
enemy_vertical_speed = (collision_rectangle(x-8,y+3,x+8,y+3,Spring,true,false)).spring_jump_speed
}

//Apply gravity and movement
if enemy_isfalling
    {
    enemy_vertical_speed += enemy_gravity
    y += enemy_vertical_speed
    }


// check if hitting a ceiling
if enemy_vertical_speed &lt; 0
    {
    if(collision_rectangle(x-8,y-8,x+8,y-sprite_height+enemy_vertical_speed,Wall,true,false)) //check if ceiling above you
        {
        enemy_vertical_speed = 0
        while (!collision_rectangle(x-8,y-8,x+8,y-sprite_height-1,Wall,true,false))
              {
              y -= 1
              }
        }
    } 
    
//Checking for Fall code
if place_meeting(x, y + enemy_vertical_speed, Wall)
    {
    if(enemy_isfalling)
        {
        //stop fall if floor underneath
        y = (instance_place(x, y + enemy_vertical_speed, Wall)).y
        enemy_vertical_speed = 0;
        enemy_doublejump = true;
        enemy_isfalling = false;
        }
    }
else
    {
    //set gravity to fall
    enemy_isfalling = true;
    }
    

//conveyor belts
if(collision_rectangle(x-8,y+1,x+8,y+1,Conveyor,true,false)) //check if conveyor underneath you
{
x += (collision_rectangle(x-8,y+1,x+8,y+1,Conveyor,true,false)).conveyor_rotation_speed;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()

if debug_mode
    {
    draw_set_alpha(.2)
    draw_set_color(c_red)
    
    draw_rectangle(x-enemy_sight_width,y+enemy_sight_height,x-10,y-enemy_sight_height,true)
    draw_rectangle(x+enemy_sight_width,y+enemy_sight_height,x+10,y-enemy_sight_height,true)
    
    if enemy_attacking_player
        draw_set_color(c_blue)
    
    draw_line(x,y,global.player_lastx,global.player_lasty)
    draw_set_alpha(1)
    
    //draw charging alarms
    draw_set_color(c_green)
    draw_text(x,y-40,"charge " + string(alarm[0]))
    draw_text(x,y-20,"wait " + string(alarm[1]))
    }




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
