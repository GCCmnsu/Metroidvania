<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enemy_health = 30;

enemy_attacking_player = false;
enemy_gravity = 4;

enemy_vertical_speed = 0;
enemy_gravity = .4
enemy_isfalling = false
enemy_jump_speed = -8;


//how fast the enemy moves side to side
enemy_hspeed = 2.5
enemy_jump_chance = .01 //chance of enemy jump each frame when on the ground

//ai sight params
enemy_sight_radius = 30 //how long the sightline can be to the player
enemy_sight_width = 400; //width of tracking box when enemy is agroed
enemy_sight_height = 200; //height of tracking box when enemy is agroed


//Shooting control logic
cannon_is_on = true; //false if off, true if on
cannon_refire_rate = 20; //refire timer for cannon
cannon_sight_radius = 300;
cannon_can_fire = true; //if cannon is reloaded

projectile_speed = 8
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cannon_can_fire = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement logic

//detect enemy player
if !enemy_attacking_player
    {
    if !collision_line(x,y-16,global.player_lastx,global.player_lasty,Wall, true, true)
        {
        enemy_attacking_player = true;
        }
    }

//moving to player
if enemy_attacking_player
    {
    //chase to left of player
    if(collision_rectangle(x-enemy_sight_width,y+enemy_sight_height,x-10,y-enemy_sight_height,Player,true,false))
        {
        if((!collision_rectangle(x-8,y-1,x-(8+enemy_hspeed),y-32,Wall,true,true))) //no wall in way
            {
            x -= enemy_hspeed;
            }
        //randomly jump
            if (random(1) &lt; enemy_jump_chance &amp;&amp; !enemy_isfalling)
            {
            enemy_vertical_speed = global.player_jump_speed;
            enemy_isfalling = false
            }
        }
    
    //chase to right of player
    if(collision_rectangle(x+enemy_sight_width,y+enemy_sight_height,x-10,y-enemy_sight_height,Player,true,false))
        {
        if((!collision_rectangle(x+8,y-1,x+(8+enemy_hspeed),y-32,Wall,true,true))) //no wall in way
            {
            x += enemy_hspeed;
            }
            
        //randomly jump
            if (random(1) &lt; enemy_jump_chance &amp;&amp; !enemy_isfalling)
            {
            enemy_vertical_speed = global.player_jump_speed;
            enemy_isfalling = false
            }
        }
    }

//spring code
if(collision_rectangle(x-8,y+3,x+8,y+3,Spring,true,false))
{
enemy_vertical_speed = (collision_rectangle(x-8,y+3,x+8,y+3,Spring,true,false)).spring_jump_speed
}

//Apply gravity and movement
if enemy_isfalling
    {
    enemy_vertical_speed += enemy_gravity
    y += enemy_vertical_speed
    }


// check if hitting a ceiling
if enemy_vertical_speed &lt; 0
    {
    if(collision_rectangle(x-8,y-8,x+8,y-sprite_height+enemy_vertical_speed,Wall,true,false)) //check if ceiling above you
        {
        enemy_vertical_speed = 0
        while (!collision_rectangle(x-8,y-8,x+8,y-sprite_height-1,Wall,true,false))
              {
              y -= 1
              }
        }
    } 
    
//Checking for Fall code
if(collision_rectangle(x-8,y-6,x+8,y+enemy_vertical_speed,Wall,true,false)) //check if floor underneath you
    {
    if(enemy_isfalling)
        {
        //stop fall if floor underneath
        y = (collision_rectangle(x-8,y-6,x+8,y+enemy_vertical_speed,Wall,true,false)).y;
        enemy_vertical_speed = 0;
        enemy_doublejump = true;
        enemy_isfalling = false;
        }
    }
else
    {
    //set gravity to fall
    enemy_isfalling = true;
    }
    

//conveyor belts
if(collision_rectangle(x-8,y+1,x+8,y+1,Conveyor,true,false)) //check if conveyor underneath you
{
x += (collision_rectangle(x-8,y+1,x+8,y+1,Conveyor,true,false)).conveyor_rotation_speed;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shooting logic

if cannon_is_on and cannon_can_fire
    {
    //check if player in radius
    var tempid = collision_circle(x,y,cannon_sight_radius,Player,false,true)
    var xx, yy;
    
    if tempid
        {
        //draw sight line to it
        direction = point_direction(x,y-16,(tempid).x,(tempid).y-16)
        xx = x + lengthdir_x(9,direction)
        yy = y - 16 + lengthdir_y(9,direction)
        if !collision_line((tempid).x,(tempid).y - 16,xx,yy,Wall,true,true)
            {
            //fire cannon
            var plasma_id = (instance_create(xx,yy,Plasma));
            plasma_id.direction = direction;
            plasma_id.speed = projectile_speed;
            
            //refire stuff
            cannon_can_fire = false;
            alarm[0] = cannon_refire_rate
            }
        
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if debug_mode
    {
    draw_set_alpha(.2)
    draw_set_color(c_red)
    
    draw_rectangle(x-enemy_sight_width,y+enemy_sight_height,x-10,y-enemy_sight_height,true)
    draw_rectangle(x+enemy_sight_width,y+enemy_sight_height,x+10,y-enemy_sight_height,true)
    
    if enemy_attacking_player
        draw_set_color(c_blue)
    
    draw_line(x,y,global.player_lastx,global.player_lasty)
    draw_set_alpha(1)
    }


draw_self()

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
